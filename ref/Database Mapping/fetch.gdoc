h1. fetch

h2. 目的 {hidden}Purpose{hidden}

Configures the fetching behavior of an association.

h2. 使用例 {hidden}Examples{hidden}

{code:java}
class Author {

    static hasMany = [books: Book]

    static mapping = {
        books fetch: 'join'
    }
}
{code}

h2. 詳細 {hidden}Description{hidden}

{hidden}Usage: @association_name(fetch:string)@{hidden}
使用方法: {hidden}Usage:{hidden} @association_name(fetch:string)@

引数: {hidden}Arguments:{hidden}

* @fetchStrategy@ - The fetching strategy to use. Either @join@ or @select@.

By default GORM assumes fetching of associations is done using a @SELECT@ when the association is accessed. If you prefer that the association be fetched eagerly at the same time then you can override the behavior:

{code:java}
class Author {

    static hasMany = [books: Book]

    static mapping = {
        books fetch: 'join'
    }
}
{code}

Here the @books@ association will be fetched using a join at the same time the author is retrieved, for example:

{code:java}
def author = Author.get(1)
// the books collection is pre-initialized - no risk of lazy loading exceptions
{code}

Note that excessive use of joins can be a performance bottleneck. See the section on [Eager vs Lazing Fetching|guide:fetching] in the user guide.
