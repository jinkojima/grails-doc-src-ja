h1. column

h2. 目的 {hidden}Purpose{hidden}

Customizes a column definition

h2. 使用例 {hidden}Examples{hidden}

{code:java}
    static mapping = {
        currency column: "currency", sqlType: "char", length: 3
    }
{code}

h2. 詳細 {hidden}Description{hidden}

{hidden}Usage: @property_name(map)@{hidden}
使用方法: {hidden}Usage:{hidden} @property_name(map)@

引数: {hidden}Arguments:{hidden}

* @column@ - The name of the column as a String
* @sqlType@ (optional) - The underlying SQL type
* @enumType@ (optional) - The enum type in for type-safe Enum properties. Either @ordinal@ or @string@.
* @index@ (optional) - The index name
* @unique@ (optional) - Whether it is unique
* @length@ (optional) - The length of the column
* @precision@ (optional) - The precision of the column
* @scale@ (optional) - The scale of the column
* @comment@ (optional) - The comment for the column (used to create the table DDL)
* @defaultValue@ (optional) - The database default value

By default GORM uses the property name and type to determine how to map a property in the database. For example a @String@ property is typically mapped as a @varchar(255)@ column. You can customize these with column configuration arguments:

{code:java}
static mapping = {
    currency column: "currency", sqlType: "char", length: 3
}
{code}

If you use a Hibernate [type|databaseMapping] that requires multiple column definitions you can use the @column@ method to define each column:

{code:java}
static mapping = {
    amount type: MonetaryUserType, {
        column name: "value"
        column name: "currency", sqlType: "char", length: 3
    }
}
{code}
