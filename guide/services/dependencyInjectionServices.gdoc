h4. 依存性の注入の基本 {hidden}Dependency Injection Basics {hidden}

{hidden}A key aspect of Grails services is the ability to use [Spring Framework|http://www.springframework.org/]'s dependency injection features. Grails supports "dependency injection by convention". In other words, you can use the property name representation of the class name of a service to automatically inject them into controllers, tag libraries, and so on.{hidden}
Grailsのサービスの重要な側面は、[Springフレームワーク|http://www.springframework.org/]が持つ依存性注入機能を活用するための能力です。Grailsは、「規約による依存性の注入」をサポートしています。言い換えれば、サービスのクラス名のプロパティ名表現を使用することで、自動的にコントローラ、タグライブラリなどにサービスが注入されます。

{hidden}As an example, given a service called @BookService@, if you define a property called @bookService@ in a controller as follows:{hidden}
例として、@BookService@というサービスが与えられた場合、次のようにコントローラの中に@bookService@という名前のプロパティを配置します:

{code:java}
class BookController {
    def bookService
    ...
}
{code}

{hidden}In this case, the Spring container will automatically inject an instance of that service based on its configured scope. All dependency injection is done by name. You can also specify the type as follows:{hidden}
この場合、Springコンテナが設定されたスコープに基づいてサービスのインスタンスを自動的に注入します。すべての依存性の注入は、名前によって行われます。次のように型を指定することもできます:

{code:java}
class AuthorService {
    BookService bookService
}
{code}

{note}
{hidden}NOTE: Normally the property name is generated by lower casing the first letter of the type.  For example, an instance of the @BookService@ class would map to a property named @bookService@.{hidden}
注:通常、プロパティ名は、型の最初の文字を小文字のにして生成します。たとえば、@BookService@クラスのインスタンスは、@bookService@という名前のプロパティにマップされます。

{hidden}To be consistent with standard JavaBean conventions, if the first 2 letters of the class name are upper case, the property name is the same as the class name.  For example, the property name of the @JDBCHelperService@ class would be @JDBCHelperService@, not @jDBCHelperService@ or @jdbcHelperService@.{hidden}
標準のJavaBean規約と整合をとるため、クラス名の最初の2文字が大文字の場合、プロパティ名はクラス名と同じになります。たとえば@JDBCHelperService@クラスは、@jDBCHelperService@また@jdbcHelperService@では無く、@JDBCHelperService@という名前のプロパティにマップされます。

{hidden}See section 8.8 of the JavaBean specification for more information on de-capitalization rules.{hidden}
小文字への変換規則の詳細については、JavaBeanの仕様のセクション8.8を参照してください。
{note}

h4. 依存性注入とサービス {hidden}Dependency Injection and Services {hidden}

{hidden}You can inject services in other services with the same technique. If you had an @AuthorService@ that needed to use the @BookService@, declaring the @AuthorService@ as follows would allow that:{hidden}
同じ方法で他のサービスにサービスを注入することができます。たとえば、@AuthorService@が@BookService@使用する場合、 次のように@AuthorService@を宣言することで使用することができます:

{code:java}
class AuthorService {
    def bookService
}
{code}

h4. 依存性注入とドメインクラス/タグライブラリ {hidden}Dependency Injection and Domain Classes / Tag Libraries {hidden}

{hidden}You can even inject services into domain classes and tag libraries, which can aid in the development of rich domain models and views:{hidden}
ドメインクラスとタグライブラリにもサービスを注入することでき、豊富なドメインモデルやビューの開発を支援することができます:

{code:java}
class Book {
    ...
    def bookService

    def buyBook() {
        bookService.buyBook(this)
    }
}
{code}

h4. Service Bean Names

The default bean name which is associated with a service can be problematic if there are multiple services with the same name defined in different packages.  For example consider the situation where an application defines a service class named @com.demo.ReportingService@ and the application uses a plugin named @ReportingUtilities@ and that plugin provides a service class named @com.reporting.util.ReportingService@.  The default bean name for each of those would be @reportingService@ so they would conflict with each other.  Grails manages this by changing the default bean name for services provided by plugins by prefixing the bean name with the plugin name.  In the scenario described above the @reportingService@ bean would be an instance of the @com.demo.ReportingService@ class defined in the application and the @reportingUtilitiesReportingService@ bean would be an instance of the @com.reporting.util.ReportingService@ class provided by the @ReportingUtilities@ plugin.  For all service beans provided by plugins, if there are no other services with the same name within the application or other plugins in the application then a bean alias will be created which does not include the plugin name and that alias points to the bean referred to by the name that does include the plugin name prefix.  For example, if the @ReportingUtilities@ plugin provides a service named @com.reporting.util.AuthorService@ and there is no other @AuthorService@ in the application or in any of the plugins that the application is using then there will be a bean named @reportingUtilitiesAuthorService@ which is an instance of this @com.reporting.util.AuthorService@ class and there will be a bean alias defined in the context named @authorService@ which points to that same bean.
